-------------
----VIEWS----
-------------

--1--

CREATE VIEW CHARGESVIEW1 AS
SELECT EXPENSE_ITEMS.NAME FROM EXPENSE_ITEMS
JOIN CHARGES ON CHARGES.EXPENSE_ITEM_ID = EXPENSE_ITEMS.ID
GROUP BY EXPENSE_ITEMS.ID, EXPENSE_ITEMS.NAME
HAVING (SUM(CHARGES.AMOUNT) > 500);

--2--

CREATE VIEW CHARESVIEW2 AS
SELECT DISTINCT NAME, SUM(CHARGES.AMOUNT) AS "Cost"
FROM EXPENSE_ITEMS
JOIN CHARGES
ON EXPENSE_ITEMS.ID = CHARGES.EXPENSE_ITEM_ID
WHERE CHARGE_DATE > add_months(sysdate,-1)
GROUP BY NAME;

------------------
----PROCEDURES----
------------------

---Without params---

CREATE OR REPLACE PROCEDURE GOODS_AVG_PRICES IS
CURSOR GOODS_CURSOR IS  SELECT NAME, AVG(SALES.AMOUNT) AS "AVG"
                        FROM WAREHOUSES
                        JOIN SALES ON SALES.WAREHOUSE_ID = WAREHOUSES.ID
                        GROUP BY NAME;
GOOD_NAME VARCHAR2(50);
GOOD_AVG NUMBER;

BEGIN
    OPEN GOODS_CURSOR;
    LOOP
        FETCH GOODS_CURSOR INTO GOOD_NAME,GOOD_AVG;
        EXIT WHEN GOODS_CURSOR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('NAME=' || GOOD_NAME || ', AVG=' || GOOD_AVG);
    END LOOP;
END GOODS_AVG_PRICES;


---With "in" params---

CREATE OR REPLACE PROCEDURE INTERSECT_GOODS_DATES(GOOD_ID_1 IN NUMBER, GOOD_ID_2 IN NUMBER) IS
CURSOR SALES_CURSOR IS  SELECT TO_CHAR(SALES.SALE_DATE , 'YYYY-MM-DD') AS "SALE_DATE"
                        FROM (
                            SELECT *
                            FROM SALES
                            WHERE WAREHOUSE_ID = GOOD_ID_1
                        ) RES
                        JOIN SALES
                        ON TO_CHAR(SALES.SALE_DATE , 'YYYY-MM-DD') = TO_CHAR(RES.SALE_DATE, 'YYYY-MM-DD')
                        WHERE SALES.WAREHOUSE_ID = GOOD_ID_2
                        GROUP BY SALES.SALE_DATE;

SALE_DATE VARCHAR2(50);

BEGIN
OPEN SALES_CURSOR;
LOOP
    FETCH SALES_CURSOR INTO SALE_DATE;
    EXIT WHEN SALES_CURSOR%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('DATE='|| SALE_DATE);
END LOOP;

END INTERSECT_GOODS_DATES;



---With "out" params---

CREATE OR REPLACE PROCEDURE SALES_CHARGES_IN_INTERVAL (DATE_1 IN DATE, DATE_2 IN DATE, SALES_SUM OUT NUMBER, CHARGES_SUM OUT NUMBER) IS
BEGIN
    SELECT SUM(AMOUNT * QUANTITY)
    INTO SALES_SUM
    FROM SALES
    WHERE SALE_DATE BETWEEN DATE_1 AND DATE_2;
    
    SELECT SUM(AMOUNT)
    INTO CHARGES_SUM
    FROM CHARGES
    WHERE CHARGE_DATE BETWEEN DATE_1 AND DATE_2;
END SALES_CHARGES_IN_INTERVAL;


---------------
----TRIGGER----
---------------

--Insert trigger--

CREATE OR REPLACE TRIGGER CHECK_CHARGE
BEFORE INSERT ON CHARGES
FOR EACH ROW
DECLARE
CHARGE_AMOUNT_MAX NUMBER := 3000;
BEGIN
    IF (:NEW.AMOUNT>=CHARGE_AMOUNT_MAX) THEN   
        RAISE_APPLICATION_ERROR(-20000, 'THERE COULD NOT BE A CHARGE MORE THAN 3000');
    END IF;
END;


--Update trigger--

CREATE OR REPLACE TRIGGER RESTRICT_SALES_UPDATE
BEFORE UPDATE ON SALES
FOR EACH ROW
BEGIN
    IF (:NEW.SALE_DATE<=sysdate) THEN
        RAISE_APPLICATION_ERROR(-20000, 'STOP RIGHT THERE, CRIMINAL SCUM! NOBODY BREAKS THE LAW ON MY WATCH!');
    END IF;
END;

--Delete trigger--

CREATE OR REPLACE TRIGGER DELETE_CHARGE_ITEM
BEFORE DELETE ON CHARGES
FOR EACH ROW
BEGIN
    IF (:OLD.CHARGE_DATE < add_months(sysdate,-1)) THEN
        RAISE_APPLICATION_ERROR(-20000, 'CANT DELETE! ITS BEEN MORE THAN A MONTH');
    END IF;
END;


--------------
----CURSOR----
--------------

CREATE OR REPLACE PROCEDURE COUNT_INCOME (RESULT_INCOME OUT NUMBER) AS

CURSOR CUR_SALES IS     SELECT AMOUNT*QUANTITY, SALE_DATE
                        FROM SALES
                        WHERE SALE_DATE > add_months(sysdate,-4);

CURSOR CUR_CHARGES IS   SELECT AMOUNT, CHARGE_DATE
                        FROM CHARGES
                        WHERE CHARGE_DATE > add_months(sysdate,-4);

AVG_CHARGES NUMBER;
CURRENT_CHARGE NUMBER;
CURRENT_CHARGE_DATE TIMESTAMP;
AVG_SALES NUMBER;
CURRENT_SALE NUMBER;
CURRENT_SALE_DATE TIMESTAMP;

BEGIN
    OPEN CUR_SALES;
        LOOP
            FETCH CUR_SALES INTO CURRENT_SALE, CURRENT_SALE_DATE;
            EXIT WHEN CUR_SALES%NOTFOUND;
            
            IF ( CURRENT_SALE_DATE >= add_months(sysdate,-1))
                THEN AVG_SALES := CURRENT_SALE * 1;
            END IF;
            IF ( CURRENT_SALE_DATE >= add_months(sysdate,-2) AND CURRENT_SALE_DATE < add_months(sysdate,-1))
                THEN AVG_SALES := CURRENT_SALE * 0.5;
            END IF;
            IF ( CURRENT_SALE_DATE > add_months(sysdate,-4) AND CURRENT_SALE_DATE < add_months(sysdate,-2))
                THEN AVG_SALES := CURRENT_SALE * 0.25;
            END IF;
        END LOOP;
    
    OPEN CUR_CHARGES;
        LOOP
            FETCH CUR_CHARGES INTO CURRENT_CHARGE, CURRENT_CHARGE_DATE;
            EXIT WHEN CUR_CHARGES%NOTFOUND;
            
            IF ( CURRENT_CHARGE_DATE >= add_months(sysdate,-1))
                THEN AVG_CHARGES := CURRENT_CHARGE * 1;
            END IF;
            
            IF ( CURRENT_CHARGE_DATE >= add_months(sysdate,-2) AND CURRENT_CHARGE_DATE < add_months(sysdate,-1))
                THEN AVG_CHARGES := CURRENT_CHARGE * 0.5;
            END IF;
            IF ( CURRENT_CHARGE_DATE > add_months(sysdate,-4) AND CURRENT_CHARGE_DATE < add_months(sysdate,-2))
                THEN AVG_CHARGES := CURRENT_CHARGE * 0.25;
            END IF;
        END LOOP;
    RESULT_INCOME := AVG_SALES - AVG_CHARGES;
END COUNT_INCOME;
